h6("overall score = average homework level + average difficulty level, arranged in increasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table2"))
)
),
tabPanel( "Highest Ranked Professors（by courses）",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point() + xlab("Average Rating") + ylab("Average Difficulty")  + labs(color='Professor')  + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p)#, tooltip = c("Professor name", "average rating", "average difficulty")) #%>%
# partial_bundle()
})
output$table3 <- DT::renderDataTable(DT::datatable({
data3 <- phy_prof2 %>% filter(tDept == input$dept) %>% arrange(-overall_score)
data3
}, style = "bootstrap"))
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point() + xlab("Average Homework Level") + ylab("Average Difficulty")  + labs(color='courses') + theme(legend.position='none')
ggplotly(p) #%>%
#partial_bundle()
})
output$table2 <- DT::renderDataTable(DT::datatable({
data2 <- courses_rate2 %>% filter(tDept == input$dept2) %>% arrange(overall_score) %>% rename(Department = tDept, 'Course Name' = course_name, 'Average HW Level' = avg_hw_lvl, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data2
}, style = "bootstrap"))
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
View(phy_prof2)
linebreaks <- function(n){HTML(strrep(br(), n))}
ui <- navbarPage("NACC: BU",
theme = shinytheme("sandstone"),
tabPanel( "Rank by professors",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"),
p(linebreaks(3)),
h3("Professor ranked by average"),
h6("overall score = average rating - average difficulty level, arranged in decreasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table3")
))
),
tabPanel( "Rank by courses",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"),
p(linebreaks(3)),
h3("Courses ranked by average"),
h6("overall score = average homework level + average difficulty level, arranged in increasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table2"))
)
),
tabPanel( "Highest Ranked Professors（by courses）",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point() + xlab("Average Rating") + ylab("Average Difficulty")  + labs(color='Professor')  + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p)#, tooltip = c("Professor name", "average rating", "average difficulty")) #%>%
# partial_bundle()
})
output$table3 <- DT::renderDataTable(DT::datatable({
data3 <- phy_prof2 %>% filter(tDept == input$dept) %>% arrange(-overall_score) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data3
}, style = "bootstrap"))
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point() + xlab("Average Homework Level") + ylab("Average Difficulty")  + labs(color='courses') + theme(legend.position='none')
ggplotly(p) #%>%
#partial_bundle()
})
output$table2 <- DT::renderDataTable(DT::datatable({
data2 <- courses_rate2 %>% filter(tDept == input$dept2) %>% arrange(overall_score) %>% rename(Department = tDept, 'Course' = course_name, 'Average HW Level' = avg_hw_lvl, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data2
}, style = "bootstrap"))
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
linebreaks <- function(n){HTML(strrep(br(), n))}
ui <- navbarPage("NACC: BU",
theme = shinytheme("sandstone"),
tabPanel( "Rank by professors",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"),
p(linebreaks(3)),
h3("Professor ranked by average"),
h6("overall score = average rating - average difficulty level, arranged in decreasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table3")
))
),
tabPanel( "Rank by courses",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"),
p(linebreaks(3)),
h3("Courses ranked by average"),
h6("overall score = average homework level + average difficulty level, arranged in increasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table2"))
)
),
tabPanel( "Highest Ranked Professors（by courses）",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point() + xlab("Average Rating") + ylab("Average Difficulty")  + labs(color='Professor')  + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p)#, tooltip = c("Professor name", "average rating", "average difficulty")) #%>%
# partial_bundle()
})
output$table3 <- DT::renderDataTable(DT::datatable({
data3 <- phy_prof2 %>% filter(tDept == input$dept) %>% arrange(-overall_score) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data3
}, style = "bootstrap"))
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point() + xlab("Average Homework Level") + ylab("Average Difficulty")  + labs(color='courses') + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p) #%>%
#partial_bundle()
})
output$table2 <- DT::renderDataTable(DT::datatable({
data2 <- courses_rate2 %>% filter(tDept == input$dept2) %>% arrange(overall_score) %>% rename(Department = tDept, 'Course' = course_name, 'Average HW Level' = avg_hw_lvl, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data2
}, style = "bootstrap"))
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
linebreaks <- function(n){HTML(strrep(br(), n))}
ui <- navbarPage("NACC: BU",
theme = shinytheme("sandstone"),
tabPanel( "Rank by professors",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"),
p(linebreaks(3)),
h3("Professor ranked by average"),
h6("overall score = average rating - average difficulty level, arranged in decreasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table3")
))
),
tabPanel( "Rank by courses",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"),
p(linebreaks(3)),
h3("Courses ranked by average"),
h6("overall score = average homework level + average difficulty level, arranged in increasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table2"))
)
),
tabPanel( "Highest Ranked Professors（by courses）",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score) %>% ggplot(aes_string(x = "Average Rating", y = "Average Difficulty", color = "Professor Name")) + geom_point() + xlab("Average Rating") + ylab("Average Difficulty")  + labs(color='Professor')  + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p)#, tooltip = c("Professor name", "average rating", "average difficulty")) #%>%
# partial_bundle()
})
output$table3 <- DT::renderDataTable(DT::datatable({
data3 <- phy_prof2 %>% filter(tDept == input$dept) %>% arrange(-overall_score) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data3
}, style = "bootstrap"))
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point() + xlab("Average Homework Level") + ylab("Average Difficulty")  + labs(color='courses') + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p) #%>%
#partial_bundle()
})
output$table2 <- DT::renderDataTable(DT::datatable({
data2 <- courses_rate2 %>% filter(tDept == input$dept2) %>% arrange(overall_score) %>% rename(Department = tDept, 'Course' = course_name, 'Average HW Level' = avg_hw_lvl, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data2
}, style = "bootstrap"))
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
deployApp()
runApp()
linebreaks <- function(n){HTML(strrep(br(), n))}
ui <- navbarPage("NACC: BU",
theme = shinytheme("sandstone"),
tabPanel( "Rank by professors",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"),
p(linebreaks(3)),
h3("Professor ranked by average"),
h6("overall score = average rating - average difficulty level, arranged in decreasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table3")
))
),
tabPanel( "Rank by courses",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"),
p(linebreaks(3)),
h3("Courses ranked by average"),
h6("overall score = average homework level + average difficulty level, arranged in increasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table2"))
)
),
tabPanel( "Highest Ranked Professors（by courses）",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff)
p <- p %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point() + xlab("Average Rating") + ylab("Average Difficulty")  + labs(color='Professor')  + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p)#, tooltip = c("Professor name", "average rating", "average difficulty")) #%>%
# partial_bundle()
})
output$table3 <- DT::renderDataTable(DT::datatable({
data3 <- phy_prof2 %>% filter(tDept == input$dept) %>% arrange(-overall_score) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data3
}, style = "bootstrap"))
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point() + xlab("Average Homework Level") + ylab("Average Difficulty")  + labs(color='courses') + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p) #%>%
#partial_bundle()
})
output$table2 <- DT::renderDataTable(DT::datatable({
data2 <- courses_rate2 %>% filter(tDept == input$dept2) %>% arrange(overall_score) %>% rename(Department = tDept, 'Course' = course_name, 'Average HW Level' = avg_hw_lvl, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data2
}, style = "bootstrap"))
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
linebreaks <- function(n){HTML(strrep(br(), n))}
ui <- navbarPage("NACC: BU",
theme = shinytheme("sandstone"),
tabPanel( "Rank by professors",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"),
p(linebreaks(3)),
h3("Professor ranked by average"),
h6("overall score = average rating - average difficulty level, arranged in decreasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table3")
))
),
tabPanel( "Rank by courses",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"),
p(linebreaks(3)),
h3("Courses ranked by average"),
h6("overall score = average homework level + average difficulty level, arranged in increasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table2"))
)
),
tabPanel( "Highest Ranked Professors（by courses）",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff)
p <- p %>% ggplot(aes_string(x = 'Average Rating', y = 'Average Difficulty', color = 'Professor Name')) + geom_point() + xlab("Average Rating") + ylab("Average Difficulty")  + labs(color='Professor')  + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p)#, tooltip = c("Professor name", "average rating", "average difficulty")) #%>%
# partial_bundle()
})
output$table3 <- DT::renderDataTable(DT::datatable({
data3 <- phy_prof2 %>% filter(tDept == input$dept) %>% arrange(-overall_score) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data3
}, style = "bootstrap"))
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point() + xlab("Average Homework Level") + ylab("Average Difficulty")  + labs(color='courses') + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p) #%>%
#partial_bundle()
})
output$table2 <- DT::renderDataTable(DT::datatable({
data2 <- courses_rate2 %>% filter(tDept == input$dept2) %>% arrange(overall_score) %>% rename(Department = tDept, 'Course' = course_name, 'Average HW Level' = avg_hw_lvl, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data2
}, style = "bootstrap"))
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
linebreaks <- function(n){HTML(strrep(br(), n))}
ui <- navbarPage("NACC: BU",
theme = shinytheme("sandstone"),
tabPanel( "Rank by professors",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"),
p(linebreaks(3)),
h3("Professor ranked by average"),
h6("overall score = average rating - average difficulty level, arranged in decreasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table3")
))
),
tabPanel( "Rank by courses",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"),
p(linebreaks(3)),
h3("Courses ranked by average"),
h6("overall score = average homework level + average difficulty level, arranged in increasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table2"))
)
),
tabPanel( "Highest Ranked Professors（by courses）",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff)
p <- p %>% ggplot(aes_string(x = 'Average Rating', y = 'Average Difficulty', color = 'Professor Name')) + geom_point() + xlab("Average Rating") + ylab("Average Difficulty")  + labs(color='Professor')  + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p)#, tooltip = c("Professor name", "average rating", "average difficulty")) #%>%
# partial_bundle()
})
output$table3 <- DT::renderDataTable(DT::datatable({
data3 <- phy_prof2 %>% filter(tDept == input$dept) %>% arrange(-overall_score) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data3
}, style = "bootstrap"))
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point() + xlab("Average Homework Level") + ylab("Average Difficulty")  + labs(color='courses') + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p) #%>%
#partial_bundle()
})
output$table2 <- DT::renderDataTable(DT::datatable({
data2 <- courses_rate2 %>% filter(tDept == input$dept2) %>% arrange(overall_score) %>% rename(Department = tDept, 'Course' = course_name, 'Average HW Level' = avg_hw_lvl, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data2
}, style = "bootstrap"))
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
linebreaks <- function(n){HTML(strrep(br(), n))}
ui <- navbarPage("NACC: BU",
theme = shinytheme("sandstone"),
tabPanel( "Rank by professors",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"),
p(linebreaks(3)),
h3("Professor ranked by average"),
h6("overall score = average rating - average difficulty level, arranged in decreasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table3")
))
),
tabPanel( "Rank by courses",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"),
p(linebreaks(3)),
h3("Courses ranked by average"),
h6("overall score = average homework level + average difficulty level, arranged in increasing order"),
p(linebreaks(1)),
DT::dataTableOutput("table2"))
)
),
tabPanel( "Highest Ranked Professors（by courses）",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "Department", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff)
p <- p %>% ggplot(aes_string(x = 'Average Rating', y = 'Average Difficulty')) + geom_point() + xlab("Average Rating") + ylab("Average Difficulty")  + labs(color='Professor')  + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p)#, tooltip = c("Professor name", "average rating", "average difficulty")) #%>%
# partial_bundle()
})
output$table3 <- DT::renderDataTable(DT::datatable({
data3 <- phy_prof2 %>% filter(tDept == input$dept) %>% arrange(-overall_score) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data3
}, style = "bootstrap"))
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point() + xlab("Average Homework Level") + ylab("Average Difficulty")  + labs(color='courses') + theme(legend.position='none', axis.text = element_text(family = "Roboto"), axis.title = element_text(family = "Roboto"))
ggplotly(p) #%>%
#partial_bundle()
})
output$table2 <- DT::renderDataTable(DT::datatable({
data2 <- courses_rate2 %>% filter(tDept == input$dept2) %>% arrange(overall_score) %>% rename(Department = tDept, 'Course' = course_name, 'Average HW Level' = avg_hw_lvl, 'Average Difficulty' = avg_diff, 'Overall Score' = overall_score)
data2
}, style = "bootstrap"))
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
j <- phy_prof %>% filter(tDept == input$dept) %>% rename(Department = tDept, 'Professor Name' = prof_name, 'Average Rating' = avg_rating, 'Average Difficulty' = avg_diff)
runApp()
runApp()
