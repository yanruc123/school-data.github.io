theme = shinytheme("flatly"),
tabPanel( "Professor Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"))
),
),
tabPanel( "Course Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"))
)
),
tabPanel( "Rank by Professor",
fluidRow(
column(4,
selectInput("dept",
"Departments:",
c(departments))
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof
#if (input$dept != "All") {
data <- data %>% filter(data$tDept == input$dept)
# }
data
}))
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(plotly)
library(shiny)
library(shinythemes)
library(DT)
bu_data <- read_csv("data/bu.csv", guess_max = 1001)#, col_types = cols(level_difficulty = col_integer()))
#bu_data <- read.csv("data/bu.csv", col_types = cols_only(prof_name = col_character(), school = col_character(), course_name = col_character(), rate_prof = col_double(), level_difficulty = col_double(), take_again = col_character(), attendence = col_character(), comments = col_character(), hw_level = col_integer()))
dept <- bu_data %>% pull(tDept) %>% unique() %>% sort()
phy_prof <- bu_data %>% group_by(tDept, prof_name) %>% summarise(tDept, avg_rating=mean(rate_prof), avg_diff = mean(level_difficulty)) %>% unique()
courses_rate <- bu_data %>% group_by(tDept, course_name) %>% summarise(course_name, avg_hw_lvl=mean(hw_level), avg_diff = mean(level_difficulty)) %>% unique()
#clean the course data
courses_rate <- courses_rate %>% filter(!is.na(avg_hw_lvl) & !is.na(avg_diff)) %>% filter(str_length(course_name) == 5)
#for each course, find the best rating professor
top_prof <- bu_data %>% filter(str_length(course_name) == 5) %>% summarise(prof_name, course_name, rate_prof, tDept, hw_level) %>% group_by(course_name) %>% mutate(rank = dense_rank(desc(rate_prof))) %>% filter(rank == 1) %>% ungroup() %>% arrange(tDept) %>% summarise(prof_name, course_name, rate_prof, hw_level, tDept)
departments <- top_prof %>% pull(tDept) %>% unique() %>% sort()
courses <- top_prof %>% pull(course_name) %>% unique() %>% sort()
ui <- navbarPage("NACC",
theme = shinytheme("flatly"),
tabPanel( "Professor Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"))
),
),
tabPanel( "Course Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"))
)
),
tabPanel( "Rank by Professor",
fluidRow(
column(4,
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(data$tDept == input$dept)
data
}))
}
shinyApp(ui = ui, server = server)
ui <- navbarPage("NACC",
theme = shinytheme("flatly"),
tabPanel( "Professor Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"))
),
),
tabPanel( "Course Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"))
)
),
tabPanel( "Rank by Professor",
fluidRow(
column(4,
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept)
data
}))
}
shinyApp(ui = ui, server = server)
ui <- navbarPage("NACC",
theme = shinytheme("flatly"),
tabPanel( "Professor Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"))
),
),
tabPanel( "Course Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"))
)
),
tabPanel( "Rank by Professor",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(plotly)
library(shiny)
library(shinythemes)
library(DT)
bu_data <- read_csv("data/bu.csv", guess_max = 1001)#, col_types = cols(level_difficulty = col_integer()))
#bu_data <- read.csv("data/bu.csv", col_types = cols_only(prof_name = col_character(), school = col_character(), course_name = col_character(), rate_prof = col_double(), level_difficulty = col_double(), take_again = col_character(), attendence = col_character(), comments = col_character(), hw_level = col_integer()))
dept <- bu_data %>% pull(tDept) %>% unique() %>% sort()
phy_prof <- bu_data %>% group_by(tDept, prof_name) %>% summarise(tDept, avg_rating=mean(rate_prof), avg_diff = mean(level_difficulty)) %>% unique()
courses_rate <- bu_data %>% group_by(tDept, course_name) %>% summarise(course_name, avg_hw_lvl=mean(hw_level), avg_diff = mean(level_difficulty)) %>% unique()
#clean the course data
courses_rate <- courses_rate %>% filter(!is.na(avg_hw_lvl) & !is.na(avg_diff)) %>% filter(str_length(course_name) == 5)
#for each course, find the best rating professor
top_prof <- bu_data %>% filter(str_length(course_name) == 5) %>% summarise(prof_name, course_name, rate_prof, tDept) %>% group_by(course_name) %>% mutate(rank = dense_rank(desc(rate_prof))) %>% filter(rank == 1) %>% ungroup() %>% arrange(tDept) %>% summarise(prof_name, course_name, rate_prof, tDept)
departments <- top_prof %>% pull(tDept) %>% unique() %>% sort()
courses <- top_prof %>% pull(course_name) %>% unique() %>% sort()
ui <- navbarPage("NACC",
theme = shinytheme("flatly"),
tabPanel( "Professor Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"))
),
),
tabPanel( "Course Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"))
)
),
tabPanel( "Rank by Professor",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(plotly)
library(shiny)
library(shinythemes)
library(DT)
bu_data <- read_csv("data/bu.csv", guess_max = 1001)#, col_types = cols(level_difficulty = col_integer()))
#bu_data <- read.csv("data/bu.csv", col_types = cols_only(prof_name = col_character(), school = col_character(), course_name = col_character(), rate_prof = col_double(), level_difficulty = col_double(), take_again = col_character(), attendence = col_character(), comments = col_character(), hw_level = col_integer()))
dept <- bu_data %>% pull(tDept) %>% unique() %>% sort()
phy_prof <- bu_data %>% group_by(tDept, prof_name) %>% summarise(tDept, avg_rating=mean(rate_prof), avg_diff = mean(level_difficulty)) %>% unique()
courses_rate <- bu_data %>% group_by(tDept, course_name) %>% summarise(course_name, avg_hw_lvl=mean(hw_level), avg_diff = mean(level_difficulty)) %>% unique()
#clean the course data
courses_rate <- courses_rate %>% filter(!is.na(avg_hw_lvl) & !is.na(avg_diff)) %>% filter(str_length(course_name) == 5)
#for each course, find the best rating professor
top_prof <- bu_data %>% filter(str_length(course_name) == 5) %>% mutate(avg_hw_lvl=mean(hw_level)) %>% summarise(prof_name, course_name, rate_prof, tDept, avg_hw_lvl) %>% group_by(course_name) %>% mutate(rank = dense_rank(desc(rate_prof))) %>% filter(rank == 1) %>% ungroup() %>% arrange(tDept) %>% summarise(prof_name, course_name, rate_prof, tDept, avg_hw_lvl)
departments <- top_prof %>% pull(tDept) %>% unique() %>% sort()
courses <- top_prof %>% pull(course_name) %>% unique() %>% sort()
ui <- navbarPage("NACC",
theme = shinytheme("flatly"),
tabPanel( "Professor Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"))
),
),
tabPanel( "Course Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"))
)
),
tabPanel( "Rank by Professor",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
#for each course, find the best rating professor
top_prof <- bu_data %>% group_by(prof_name) %>% mutate(avg_hw_lvl=mean(hw_level)) %>% ungroup() %>% filter(str_length(course_name) == 5) %>% summarise(prof_name, course_name, rate_prof, tDept, avg_hw_lvl) %>% group_by(course_name) %>% mutate(rank = dense_rank(desc(rate_prof))) %>% filter(rank == 1) %>% ungroup() %>% arrange(tDept) %>% summarise(prof_name, course_name, rate_prof, tDept, avg_hw_lvl) %>% unique()
departments <- top_prof %>% pull(tDept) %>% unique() %>% sort()
courses <- top_prof %>% pull(course_name) %>% unique() %>% sort()
ui <- navbarPage("NACC",
theme = shinytheme("flatly"),
tabPanel( "Professor Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"))
),
),
tabPanel( "Course Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"))
)
),
tabPanel( "Rank by Professor",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
#for each course, find the best rating professor
top_prof <- bu_data %>% group_by(prof_name) %>% mutate(avg_hw_lvl=round(mean(hw_level), digits = 2)) %>% ungroup() %>% filter(str_length(course_name) == 5) %>% summarise(prof_name, course_name, rate_prof, tDept, avg_hw_lvl) %>% group_by(course_name) %>% mutate(rank = dense_rank(desc(rate_prof))) %>% filter(rank == 1) %>% ungroup() %>% arrange(tDept) %>% summarise(prof_name, course_name, rate_prof, tDept, avg_hw_lvl) %>% unique()
departments <- top_prof %>% pull(tDept) %>% unique() %>% sort()
courses <- top_prof %>% pull(course_name) %>% unique() %>% sort()
ui <- navbarPage("NACC",
theme = shinytheme("flatly"),
tabPanel( "Professor Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot"))
),
),
tabPanel( "Course Ranking",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "dept2", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
),
mainPanel(
plotlyOutput("distPlot2"))
)
),
tabPanel( "Rank by Professor",
fluidRow(
column(4,
selectInput(inputId = "dept3", label = "dept", choices = dept, multiple = FALSE, selected = "Accounting department")
)
),
# Create a new row for the table.
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
output$distPlot <- renderPlotly({
p <- phy_prof %>% filter(tDept == input$dept) %>% ggplot(aes_string(x = "avg_rating", y = "avg_diff", color = "prof_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$distPlot2 <- renderPlotly({
p <- courses_rate %>% filter(tDept == input$dept2) %>% ggplot(aes_string(x = "avg_hw_lvl", y = "avg_diff", color = "course_name")) + geom_point()
ggplotly(p) %>%
partial_bundle()
})
output$table <- DT::renderDataTable(DT::datatable({
data <- top_prof %>% filter(top_prof$tDept == input$dept3)
data
}))
}
shinyApp(ui = ui, server = server)
runGitHub( "school-data.github.io", "yanrucbu\")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runApp("my_app")
runApp("App-1")
runApp("App-1")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runGitHub( "school-data.github.io", "yanrucbu")
runApp()
runGitHub( "school-data.github.io", "yanrucbu")
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='nacc-school-analysis',
token='25DE1803949D51B39CC09E996B4CCE4D',
secret='<SECRET>')
library(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='nacc-school-analysis',
token='25DE1803949D51B39CC09E996B4CCE4D',
secret='<SECRET>')
rsconnect::setAccountInfo(name='nacc-school-analysis', token='25DE1803949D51B39CC09E996B4CCE4D', secret='UZIIJCDbTSHPFAuf2yVRzFI72qC6Uw/kVgUN9moy')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('app.R')
rsconnect::deployApp('App')
rsconnect::deployApp('my_app')
rsconnect::deployApp('my_app')
runApp()
shiny::runApp('my_app')
runApp('my_app2')
bu_data <- read_csv("data/psu.csv", guess_max = 1001)
bu_data <- read_csv("data/psu.csv", guess_max = 1001)
View(bu_data)
runApp('my_app2')
deployApp()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
runApp('my_app2')
runApp('my_app2')
library(rsconnect)
deployApp(my_app2)
library(rsconnect)
deployApp()
install.packages(c('ggplot2', 'shiny'))
install.packages(c("ggplot2", "shiny"))
install.packages(c("ggplot2", "shiny"))
install.packages(c("ggplot2", "shiny"))
install.packages(c("ggplot2", "shiny"))
library(shiny)
library(ggplot2)
deployApp()
library(rsconnect)
deployApp()
runApp('my_app')
runApp('my_app')
deployApp()
deployApp()
runApp('my_app')
deployApp()
cd my_app2
deployApp()
